{"version":3,"file":"ngx-lottie.js.map","sources":["ng://ngx-lottie/src/internals.ts","ng://ngx-lottie/src/core/directives/base.directive.ts","ng://ngx-lottie/src/core/services/lottie-events.service.ts","ng://ngx-lottie/src/core/directives/lottie.directive.ts","ng://ngx-lottie/src/core/components/lottie.component.ts","ng://ngx-lottie/src/lottie.module.ts","ng://ngx-lottie/src/utils.ts","ng://ngx-lottie/src/core/services/lottie-transfer-state.ts"],"sourcesContent":["import { NgZone, EventEmitter } from '@angular/core';\n\nimport {\n  LottieOptions,\n  Lottie,\n  LottieEventName,\n  AnimationItem,\n  MappedLottieEventName,\n  LottieEvent\n} from './symbols';\nimport { BaseDirective } from './core/directives/base.directive';\n\nconst getLottiePlayer = (): Promise<Lottie> => {\n  return import(/* webpackChunkName: 'lottie' */ 'lottie-web/build/player/lottie.js');\n};\n\nfunction resolveOptions(options: LottieOptions | null, container: HTMLElement): LottieOptions {\n  const defaulOptions: LottieOptions = {\n    container,\n    renderer: 'svg',\n    loop: true,\n    autoplay: true\n  };\n\n  return Object.assign(defaulOptions, options);\n}\n\nexport async function loadAnimation(\n  zone: NgZone,\n  options: LottieOptions | null,\n  container: HTMLElement\n): Promise<AnimationItem> {\n  options = resolveOptions(options, container);\n  const player = await getLottiePlayer();\n  return zone.runOutsideAngular(() => player.loadAnimation(options!));\n}\n\n/**\n * Some dispatched events are in the `snake_case` registry, for convenience,\n * we create this object that will map event name to the `camelCase` registry\n */\nconst eventsMap: { [key in LottieEventName]: MappedLottieEventName } = {\n  complete: 'complete',\n  loopComplete: 'loopComplete',\n  enterFrame: 'enterFrame',\n  segmentStart: 'segmentStart',\n  config_ready: 'configReady',\n  data_ready: 'dataReady',\n  data_failed: 'dataFailed',\n  loaded_images: 'loadedImages',\n  DOMLoaded: 'domLoaded',\n  destroy: 'destroy'\n};\n\n/**\n * @param name - Name of the event in the `snake_case` dispatched by Lottie\n * @returns - Resolved event name in the `camelCase`\n */\nfunction mapEventToCamelCase(name: LottieEventName): MappedLottieEventName {\n  return eventsMap[name];\n}\n\nexport function getEventEmitterFromDirectiveInstance(\n  instance: BaseDirective,\n  name: LottieEventName\n) {\n  return instance[mapEventToCamelCase(name)] as EventEmitter<LottieEvent>;\n}\n\n/**\n * Events that can be dispatched by `Animationitem`\n * @see https://github.com/airbnb/lottie-web#events\n */\nexport const lottieEvents: ReadonlyArray<LottieEventName> = [\n  'complete',\n  'loopComplete',\n  'enterFrame',\n  'segmentStart',\n  'config_ready',\n  'data_ready',\n  'data_failed',\n  'loaded_images',\n  'DOMLoaded',\n  'destroy'\n];\n","import { Directive, Input, Output, EventEmitter, NgZone, ChangeDetectorRef } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { loadAnimation } from '../../internals';\nimport { LottieEventsService } from '../services/lottie-events.service';\nimport {\n  LottieOptions,\n  LottieCSSStyleDeclaration,\n  AnimationItem,\n  BMCompleteEvent,\n  BMCompleteLoopEvent,\n  BMEnterFrameEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  LottieContainerClass\n} from '../../symbols';\n\n@Directive({ selector: '[lottie]' })\nexport class BaseDirective {\n  @Input()\n  public options: LottieOptions | null = null;\n\n  @Input()\n  public containerClass: LottieContainerClass = null;\n\n  @Input()\n  public styles: LottieCSSStyleDeclaration | null = null;\n\n  @Input()\n  public width: string = null!;\n\n  @Input()\n  public height: string = null!;\n\n  @Input()\n  public detach = false;\n\n  /**\n   * `animationCreated` is dispatched after calling `loadAnimation`\n   */\n  @Output()\n  public readonly animationCreated = new EventEmitter<AnimationItem>();\n\n  /**\n   * `complete` is dispatched after completing the last frame\n   */\n  @Output()\n  public readonly complete = new EventEmitter<BMCompleteEvent>();\n\n  /**\n   * `loopComplete` is dispatched after completing frame loop\n   */\n  @Output()\n  public readonly loopComplete = new EventEmitter<BMCompleteLoopEvent>();\n\n  /**\n   * `enterFrame` is dispatched after entering the new frame\n   */\n  @Output()\n  public readonly enterFrame = new EventEmitter<BMEnterFrameEvent>();\n\n  /**\n   * `segmentStart` is dispatched when the new segment is adjusted\n   */\n  @Output()\n  public readonly segmentStart = new EventEmitter<BMSegmentStartEvent>();\n\n  /**\n   * Original event name is `config_ready`. `config_ready` is dispatched\n   * after the needed renderer is configured\n   */\n  @Output()\n  public readonly configReady = new EventEmitter<void>();\n\n  /**\n   * Original event name is `data_ready`. `data_ready` is dispatched\n   * when all parts of the animation have been loaded\n   */\n  @Output()\n  public readonly dataReady = new EventEmitter<void>();\n\n  /**\n   * Original event name is `data_failed`. `data_failed` can be dispatched\n   * if the `XMLHttpRequest`, that tried to load animation data using\n   * provided `path`, has errored\n   */\n  @Output()\n  public readonly dataFailed = new EventEmitter<void>();\n\n  /**\n   * Original event name is `loaded_images`. `loaded_images` can be\n   * dispatched after all assets are preloaded\n   */\n  @Output()\n  public readonly loadedImages = new EventEmitter<void>();\n\n  /**\n   * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched\n   * when elements have been added to the DOM\n   */\n  @Output()\n  public readonly domLoaded = new EventEmitter<void>();\n\n  /**\n   * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,\n   * it's useful for releasing resources\n   */\n  @Output()\n  public readonly destroy = new EventEmitter<BMDestroyEvent>();\n\n  protected async loadAnimation(\n    ref: ChangeDetectorRef,\n    zone: NgZone,\n    platformId: string,\n    lottieEventsService: LottieEventsService,\n    container: HTMLElement | HTMLCanvasElement,\n    instance: BaseDirective\n  ): Promise<void> {\n    if (isPlatformServer(platformId)) {\n      return;\n    }\n\n    const animationItem = await loadAnimation(zone, this.options, container);\n    lottieEventsService.animationCreated(animationItem, this.animationCreated);\n    lottieEventsService.setAnimationItemAndLottieEventListeners(animationItem, instance);\n    // Basically make this view static and never check it in the future\n    if (this.detach) {\n      ref.detach();\n    }\n  }\n}\n","import { Injectable, OnDestroy, NgZone, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { AnimationItem, LottieEvent, LottieEventName } from '../../symbols';\nimport { lottieEvents, getEventEmitterFromDirectiveInstance } from '../../internals';\nimport { BaseDirective } from '../directives/base.directive';\n\n@Injectable()\nexport class LottieEventsService implements OnDestroy {\n  private animationItem: AnimationItem | null = null;\n\n  /**\n   * Save listeners so we're able to remove them from `AnimationItem`\n   * by references in the future when this service is destroyed\n   */\n  private readonly listeners = new Map<LottieEventName, (event: LottieEvent) => void>();\n\n  constructor(\n    private readonly zone: NgZone,\n    @Inject(PLATFORM_ID) private readonly platformId: string\n  ) {}\n\n  public ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  /**\n   * This method is invoked after calling `loadAnimation` and dispatches the new one\n   * created `AnimationItem` instance\n   */\n  public animationCreated(\n    animationItem: AnimationItem,\n    animationCreated: EventEmitter<AnimationItem>\n  ): void {\n    animationCreated.emit(animationItem);\n  }\n\n  public setAnimationItemAndLottieEventListeners(\n    animationItem: AnimationItem,\n    instance: BaseDirective\n  ): void {\n    this.animationItem = animationItem;\n    // `AnimationItem` triggers different events every ms, we have to listen\n    // them outside Angular's context, thus it won't affect performance\n    this.zone.runOutsideAngular(() => this.setupLottieEventListeners(instance));\n  }\n\n  private setupLottieEventListeners(instance: BaseDirective): void {\n    lottieEvents.forEach((name) => {\n      this.setupLottieEventListener(name, instance);\n    });\n  }\n\n  private setupLottieEventListener(name: LottieEventName, instance: BaseDirective): void {\n    const emitter: EventEmitter<LottieEvent> = getEventEmitterFromDirectiveInstance(instance, name);\n    const listener = (event: LottieEvent): void => emitter.emit(event);\n\n    this.animationItem!.addEventListener(name, listener);\n\n    // We don't have to save `destroy` listener, because `AnimationItem`\n    // is able to remove `destroy` event listener itself\n    if (name !== 'destroy') {\n      this.listeners.set(name, listener);\n    }\n  }\n\n  private dispose(): void {\n    if (isPlatformServer(this.platformId) || this.animationItem === null) {\n      return;\n    }\n\n    for (const [name, callback] of this.listeners.entries()) {\n      this.animationItem!.removeEventListener(name, callback);\n    }\n\n    // Release listeners as we don't need them\n    this.listeners.clear();\n\n    // We cannot call `destroy` before removing event listeners\n    // as after calling `destroy` - `removeEventListener` becomes unavailable\n    this.animationItem!.destroy();\n    this.animationItem = null;\n  }\n}\n","import {\n  Directive,\n  OnInit,\n  ChangeDetectorRef,\n  NgZone,\n  Inject,\n  Self,\n  PLATFORM_ID,\n  ElementRef\n} from '@angular/core';\n\nimport { LottieEventsService } from '../services/lottie-events.service';\nimport { BaseDirective } from './base.directive';\n\n@Directive({\n  selector: '[lottie]',\n  providers: [LottieEventsService]\n})\nexport class LottieDirective extends BaseDirective implements OnInit {\n  constructor(\n    private readonly ref: ChangeDetectorRef,\n    private readonly zone: NgZone,\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    @Self() private readonly lottieEventsService: LottieEventsService,\n    @Self() private readonly host: ElementRef<HTMLElement>\n  ) {\n    super();\n  }\n\n  public ngOnInit(): void {\n    super.loadAnimation(\n      this.ref,\n      this.zone,\n      this.platformId,\n      this.lottieEventsService,\n      this.host.nativeElement,\n      this\n    );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  Inject,\n  ChangeDetectorRef,\n  NgZone,\n  ElementRef,\n  ViewChild,\n  Self,\n  PLATFORM_ID\n} from '@angular/core';\n\nimport { LottieEventsService } from '../services/lottie-events.service';\nimport { BaseDirective } from '../directives/base.directive';\n\n@Component({\n  selector: 'ng-lottie',\n  template: `\n    <div\n      #container\n      [style.width.px]=\"width\"\n      [style.height.px]=\"height\"\n      style=\"margin: 0 auto\"\n      [ngStyle]=\"styles\"\n      [ngClass]=\"containerClass\"\n    ></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [LottieEventsService]\n})\nexport class LottieComponent extends BaseDirective implements OnInit {\n  @ViewChild('container')\n  public container: ElementRef<HTMLElement> = null!;\n\n  constructor(\n    private readonly ref: ChangeDetectorRef,\n    private readonly zone: NgZone,\n    @Inject(PLATFORM_ID) private readonly platformId: string,\n    @Self() private readonly lottieEventsService: LottieEventsService\n  ) {\n    super();\n  }\n\n  public ngOnInit(): void {\n    super.loadAnimation(\n      this.ref,\n      this.zone,\n      this.platformId,\n      this.lottieEventsService,\n      this.container.nativeElement,\n      this\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BaseDirective } from './core/directives/base.directive';\nimport { LottieDirective } from './core/directives/lottie.directive';\nimport { LottieComponent } from './core/components/lottie.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BaseDirective, LottieDirective, LottieComponent],\n  exports: [BaseDirective, LottieDirective, LottieComponent]\n})\nexport class LottieModule {}\n","import { AnimationFilename } from './symbols';\n\nexport function transformAnimationFilenameToKey(animation: AnimationFilename): string {\n  return `animation-${animation.split('.json')[0]}`;\n}\n","import { Injectable } from '@angular/core';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename } from '../../symbols';\nimport { transformAnimationFilenameToKey } from '../../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class LottieTransferState {\n  constructor(private state: TransferState) {}\n\n  public get<T>(animation: AnimationFilename): T | null {\n    animation = transformAnimationFilenameToKey(animation);\n    const key = makeStateKey<T>(animation);\n    return this.state.get(key, null);\n  }\n}\n"],"names":["tslib_1.__values","tslib_1.__extends"],"mappings":"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"}
