{"version":3,"file":"ngx-lottie-server.js.map","sources":["ng://ngx-lottie/server/utils.ts","ng://ngx-lottie/server/internals.ts","ng://ngx-lottie/server/lottie-server.module.ts"],"sourcesContent":["import { readFile } from 'fs';\nimport { Observable } from 'rxjs';\n\nimport { AnimationData } from './symbols';\n\nexport function readFileWithAnimationData(path: string) {\n  // `Promise` is not used here to avoid creation of microtasks\n  return new Observable<AnimationData>((observer) => {\n    readFile(path, { encoding: 'utf-8' }, (error, data) => {\n      if (error) {\n        observer.error(error);\n      } else {\n        observer.next(data);\n      }\n\n      observer.complete();\n    });\n  });\n}\n","import { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { join } from 'path';\n\nimport { Observable, forkJoin } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { AnimationFilename, transformAnimationFilenameToKey } from 'ngx-lottie';\n\nimport { LottieServerOptions, PathToAnimation, AnimationData } from './symbols';\nimport { readFileWithAnimationData } from './utils';\n\nfunction readAndTransferAnimationData(\n  state: TransferState,\n  animations: AnimationFilename[],\n  pathsToAnimations: PathToAnimation[]\n): Observable<string>[] {\n  const sources: Observable<string>[] = [];\n\n  for (let i = 0, length = animations.length; i < length; i++) {\n    const path = pathsToAnimations[i];\n\n    const source = readFileWithAnimationData(path).pipe(\n      tap((animationData) => {\n        transferAnimationData(state, animations[i], animationData);\n      })\n    );\n\n    sources.push(source);\n  }\n\n  return sources;\n}\n\nfunction transferAnimationData(\n  state: TransferState,\n  animation: AnimationFilename,\n  animationData: AnimationData\n): void {\n  animation = transformAnimationFilenameToKey(animation);\n  const key = makeStateKey(animation);\n  state.set(key, JSON.parse(animationData));\n}\n\nexport function appInitializerFactory(options: LottieServerOptions, state: TransferState) {\n  const pathsToAnimations = resolveLottiePaths(options);\n  const sources = readAndTransferAnimationData(\n    state,\n    options.preloadAnimations.animations,\n    pathsToAnimations\n  );\n\n  return () => forkJoin(sources).toPromise();\n}\n\nexport function resolveLottiePaths({ preloadAnimations }: LottieServerOptions): PathToAnimation[] {\n  const { folder, animations } = preloadAnimations;\n  const path = join(process.cwd(), folder);\n\n  return animations.map((animation) => join(path, animation));\n}\n","import { NgModule, ModuleWithProviders, InjectionToken, APP_INITIALIZER } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\n\nimport { LottieServerOptions } from './symbols';\nimport { appInitializerFactory } from './internals';\n\nexport const LOTTIE_SERVER_OPTIONS = new InjectionToken<LottieServerOptions>(\n  'LOTTIE_SERVER_OPTIONS'\n);\n\n@NgModule()\nexport class LottieServerModule {\n  public static forRoot(options: LottieServerOptions): ModuleWithProviders<LottieServerModule> {\n    return {\n      ngModule: LottieServerModule,\n      providers: [\n        {\n          provide: LOTTIE_SERVER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: appInitializerFactory,\n          multi: true,\n          deps: [LOTTIE_SERVER_OPTIONS, TransferState]\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;AAKA,SAAgB,yBAAyB,CAAC,IAAY;;IAEpD,OAAO,IAAI,UAAU,CAAgB,CAAC,QAAQ;QAC5C,QAAQ,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,CAAC,KAAK,EAAE,IAAI;YAChD,IAAI,KAAK,EAAE;gBACT,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACvB;iBAAM;gBACL,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;YAED,QAAQ,CAAC,QAAQ,EAAE,CAAC;SACrB,CAAC,CAAC;KACJ,CAAC,CAAC;CACJ;;;;;;AClBD;;;;;;AAYA,SAAS,4BAA4B,CACnC,KAAoB,EACpB,UAA+B,EAC/B,iBAAoC;;UAE9B,OAAO,GAAyB,EAAE;IAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;;cACrD,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC;;cAE3B,MAAM,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC,IAAI,CACjD,GAAG,CAAC,CAAC,aAAa;YAChB,qBAAqB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;SAC5D,CAAC,CACH;QAED,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACtB;IAED,OAAO,OAAO,CAAC;CAChB;;;;;;;AAED,SAAS,qBAAqB,CAC5B,KAAoB,EACpB,SAA4B,EAC5B,aAA4B;IAE5B,SAAS,GAAG,+BAA+B,CAAC,SAAS,CAAC,CAAC;;UACjD,GAAG,GAAG,YAAY,CAAC,SAAS,CAAC;IACnC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;CAC3C;;;;;;AAED,SAAgB,qBAAqB,CAAC,OAA4B,EAAE,KAAoB;;UAChF,iBAAiB,GAAG,kBAAkB,CAAC,OAAO,CAAC;;UAC/C,OAAO,GAAG,4BAA4B,CAC1C,KAAK,EACL,OAAO,CAAC,iBAAiB,CAAC,UAAU,EACpC,iBAAiB,CAClB;IAED,OAAO,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;CAC5C;;;;;AAED,SAAgB,kBAAkB,CAAC,EAAE,iBAAiB,EAAuB;UACrE,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,iBAAiB;;UAC1C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC;IAExC,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;CAC7D;;;;;;AC5DD;AAMA,MAAa,qBAAqB,GAAG,IAAI,cAAc,CACrD,uBAAuB,CACxB;AAGD,MAAa,kBAAkB;;;;;IACtB,OAAO,OAAO,CAAC,OAA4B;QAChD,OAAO;YACL,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE,OAAO;iBAClB;gBACD;oBACE,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,qBAAqB;oBACjC,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,CAAC,qBAAqB,EAAE,aAAa,CAAC;iBAC7C;aACF;SACF,CAAC;KACH;;;YAlBF,QAAQ;;;;;;;;;;;;;;;"}
