{"version":3,"sources":["ng://ngx-lottie/server/internals.ts","ng://ngx-lottie/server/utils.ts","ng://ngx-lottie/server/lottie-server.module.ts"],"names":["readAndTransferAnimationData","state","animations","pathsToAnimations","sources","i","length_1","source","readFileWithAnimationData","path","Observable","observer","readFile","encoding","error","data","next","complete","pipe","tap","animationData","transferAnimationData","animation","transformAnimationFilenameToKey","key","makeStateKey","set","JSON","parse","push","length","appInitializerFactory","options","resolveLottiePaths","_a","preloadAnimations","folder","join","process","cwd","map","forkJoin","toPromise","LOTTIE_SERVER_OPTIONS","InjectionToken","LottieServerModule","forRoot","ngModule","providers","provide","useValue","APP_INITIALIZER","useFactory","multi","deps","TransferState","NgModule"],"mappings":"2lBAYA,SAASA,EACPC,EACAC,EACAC,GAIA,QAFMC,EAAgC,cAE7BC,EAAOC,OAGRC,ECjBV,SAAgBC,EAA0BC,GAExC,OAAO,IAAIC,EAAAA,WAA0B,SAACC,GACpCC,EAAAA,SAASH,EAAM,CAAEI,SAAU,SAAW,SAACC,EAAOC,GACxCD,EACFH,EAASG,MAAMA,GAEfH,EAASK,KAAKD,GAGhBJ,EAASM,eDOIT,CAFFL,EAAkBE,IAEgBa,KAC7CC,EAAAA,IAAI,SAACC,IAWX,SAASC,EACPpB,EACAqB,EACAF,GAEAE,EAAYC,EAAAA,gCAAgCD,OACtCE,EAAMC,EAAAA,aAAaH,GACzBrB,EAAMyB,IAAIF,EAAKG,KAAKC,MAAMR,IAjBpBC,CAAsBpB,EAAOC,EAAWG,GAAIe,MAIhDhB,EAAQyB,KAAKtB,IATNF,EAAI,EAAGC,EAASJ,EAAW4B,OAAQzB,EAAIC,EAAQD,MAA/CA,GAYT,OAAOD,EAaT,SAAgB2B,EAAsBC,EAA8B/B,OAC5DE,EAUR,SAAgB8B,EAAmBC,OAAEC,EAAAD,EAAAC,kBAC3BC,EAAAD,EAAAC,OAAQlC,EAAAiC,EAAAjC,WACVO,EAAO4B,EAAAA,KAAKC,QAAQC,MAAOH,GAEjC,OAAOlC,EAAWsC,IAAI,SAAClB,GAAc,OAAAe,EAAAA,KAAK5B,EAAMa,KAdtBW,CAAmBD,GACvC5B,EAAUJ,EACdC,EACA+B,EAAQG,kBAAkBjC,WAC1BC,GAGF,OAAO,WAAM,OAAAsC,EAAAA,SAASrC,GAASsC,aE9CjC,IAAaC,EAAwB,IAAIC,EAAAA,eACvC,yBAGFC,GAEgBA,EAAAC,QAAd,SAAsBd,GACpB,MAAO,CACLe,SAAUF,EACVG,UAAW,CACT,CACEC,QAASN,EACTO,SAAUlB,GAEZ,CACEiB,QAASE,EAAAA,gBACTC,WAAYrB,EACZsB,OAAO,EACPC,KAAM,CAACX,EAAuBY,EAAAA,uCAdvCC,EAAAA,WAmBDX,GAnBA,SAAAA","sourcesContent":["import { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { join } from 'path';\n\nimport { Observable, forkJoin } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { AnimationFilename, transformAnimationFilenameToKey } from 'ngx-lottie';\n\nimport { LottieServerOptions, PathToAnimation, AnimationData } from './symbols';\nimport { readFileWithAnimationData } from './utils';\n\nfunction readAndTransferAnimationData(\n  state: TransferState,\n  animations: AnimationFilename[],\n  pathsToAnimations: PathToAnimation[]\n): Observable<string>[] {\n  const sources: Observable<string>[] = [];\n\n  for (let i = 0, length = animations.length; i < length; i++) {\n    const path = pathsToAnimations[i];\n\n    const source = readFileWithAnimationData(path).pipe(\n      tap((animationData) => {\n        transferAnimationData(state, animations[i], animationData);\n      })\n    );\n\n    sources.push(source);\n  }\n\n  return sources;\n}\n\nfunction transferAnimationData(\n  state: TransferState,\n  animation: AnimationFilename,\n  animationData: AnimationData\n): void {\n  animation = transformAnimationFilenameToKey(animation);\n  const key = makeStateKey(animation);\n  state.set(key, JSON.parse(animationData));\n}\n\nexport function appInitializerFactory(options: LottieServerOptions, state: TransferState) {\n  const pathsToAnimations = resolveLottiePaths(options);\n  const sources = readAndTransferAnimationData(\n    state,\n    options.preloadAnimations.animations,\n    pathsToAnimations\n  );\n\n  return () => forkJoin(sources).toPromise();\n}\n\nexport function resolveLottiePaths({ preloadAnimations }: LottieServerOptions): PathToAnimation[] {\n  const { folder, animations } = preloadAnimations;\n  const path = join(process.cwd(), folder);\n\n  return animations.map((animation) => join(path, animation));\n}\n","import { readFile } from 'fs';\nimport { Observable } from 'rxjs';\n\nimport { AnimationData } from './symbols';\n\nexport function readFileWithAnimationData(path: string) {\n  // `Promise` is not used here to avoid creation of microtasks\n  return new Observable<AnimationData>((observer) => {\n    readFile(path, { encoding: 'utf-8' }, (error, data) => {\n      if (error) {\n        observer.error(error);\n      } else {\n        observer.next(data);\n      }\n\n      observer.complete();\n    });\n  });\n}\n","import { NgModule, ModuleWithProviders, InjectionToken, APP_INITIALIZER } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\n\nimport { LottieServerOptions } from './symbols';\nimport { appInitializerFactory } from './internals';\n\nexport const LOTTIE_SERVER_OPTIONS = new InjectionToken<LottieServerOptions>(\n  'LOTTIE_SERVER_OPTIONS'\n);\n\n@NgModule()\nexport class LottieServerModule {\n  public static forRoot(options: LottieServerOptions): ModuleWithProviders<LottieServerModule> {\n    return {\n      ngModule: LottieServerModule,\n      providers: [\n        {\n          provide: LOTTIE_SERVER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: appInitializerFactory,\n          multi: true,\n          deps: [LOTTIE_SERVER_OPTIONS, TransferState]\n        }\n      ]\n    };\n  }\n}\n"]}