{"version":3,"file":"ngx-lottie-server.umd.js.map","sources":["ng://ngx-lottie/server/utils.ts","ng://ngx-lottie/server/internals.ts","ng://ngx-lottie/server/lottie-server.module.ts"],"sourcesContent":["import { readFile } from 'fs';\nimport { Observable } from 'rxjs';\n\nimport { AnimationData } from './symbols';\n\nexport function readFileWithAnimationData(path: string) {\n  // `Promise` is not used here to avoid creation of microtasks\n  return new Observable<AnimationData>((observer) => {\n    readFile(path, { encoding: 'utf-8' }, (error, data) => {\n      if (error) {\n        observer.error(error);\n      } else {\n        observer.next(data);\n      }\n\n      observer.complete();\n    });\n  });\n}\n","import { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { join } from 'path';\n\nimport { Observable, forkJoin } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { AnimationFilename, transformAnimationFilenameToKey } from 'ngx-lottie';\n\nimport { LottieServerOptions, PathToAnimation, AnimationData } from './symbols';\nimport { readFileWithAnimationData } from './utils';\n\nfunction readAndTransferAnimationData(\n  state: TransferState,\n  animations: AnimationFilename[],\n  pathsToAnimations: PathToAnimation[]\n): Observable<string>[] {\n  const sources: Observable<string>[] = [];\n\n  for (let i = 0, length = animations.length; i < length; i++) {\n    const path = pathsToAnimations[i];\n\n    const source = readFileWithAnimationData(path).pipe(\n      tap((animationData) => {\n        transferAnimationData(state, animations[i], animationData);\n      })\n    );\n\n    sources.push(source);\n  }\n\n  return sources;\n}\n\nfunction transferAnimationData(\n  state: TransferState,\n  animation: AnimationFilename,\n  animationData: AnimationData\n): void {\n  animation = transformAnimationFilenameToKey(animation);\n  const key = makeStateKey(animation);\n  state.set(key, JSON.parse(animationData));\n}\n\nexport function appInitializerFactory(options: LottieServerOptions, state: TransferState) {\n  const pathsToAnimations = resolveLottiePaths(options);\n  const sources = readAndTransferAnimationData(\n    state,\n    options.preloadAnimations.animations,\n    pathsToAnimations\n  );\n\n  return () => forkJoin(sources).toPromise();\n}\n\nexport function resolveLottiePaths({ preloadAnimations }: LottieServerOptions): PathToAnimation[] {\n  const { folder, animations } = preloadAnimations;\n  const path = join(process.cwd(), folder);\n\n  return animations.map((animation) => join(path, animation));\n}\n","import { NgModule, ModuleWithProviders, InjectionToken, APP_INITIALIZER } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\n\nimport { LottieServerOptions } from './symbols';\nimport { appInitializerFactory } from './internals';\n\nexport const LOTTIE_SERVER_OPTIONS = new InjectionToken<LottieServerOptions>(\n  'LOTTIE_SERVER_OPTIONS'\n);\n\n@NgModule()\nexport class LottieServerModule {\n  public static forRoot(options: LottieServerOptions): ModuleWithProviders<LottieServerModule> {\n    return {\n      ngModule: LottieServerModule,\n      providers: [\n        {\n          provide: LOTTIE_SERVER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: appInitializerFactory,\n          multi: true,\n          deps: [LOTTIE_SERVER_OPTIONS, TransferState]\n        }\n      ]\n    };\n  }\n}\n"],"names":["path","Observable","readFile","tap","transformAnimationFilenameToKey","makeStateKey","forkJoin","join","InjectionToken","APP_INITIALIZER","TransferState","NgModule"],"mappings":"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"}
